// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : vsd_mini_fpga.v
// Device     : ice40-up5k-sg48
// LiteX sha1 : bc25ed7fd
// Date       : 2025-07-16 14:23:44
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module vsd_mini_fpga (
    (* keep = "true" *)
    input  wire          clk12,
    output wire          led_blue,
    output wire          led_green,
    output wire          led_red,
    input  wire          serial_rx,
    output reg           serial_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
MinimalSoC
└─── crg (CRG)
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (FemtoRV)
│    └─── fsm (FSM)
│    └─── [FemtoRV32]
└─── rom (SRAM)
└─── main_ram (SRAM)
└─── serial_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── serial (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── leds (GPIOOut)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [13:0] builder_adr;
reg    [29:0] builder_array_muxed0 = 30'd0;
reg    [31:0] builder_array_muxed1 = 32'd0;
reg     [3:0] builder_array_muxed2 = 4'd0;
reg           builder_array_muxed3 = 1'd0;
reg           builder_array_muxed4 = 1'd0;
reg           builder_array_muxed5 = 1'd0;
reg     [2:0] builder_array_muxed6 = 3'd0;
reg     [1:0] builder_array_muxed7 = 2'd0;
reg    [19:0] builder_count = 20'd1000000;
wire   [31:0] builder_csrbank0_bus_errors_r;
reg           builder_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csrbank0_bus_errors_w;
reg           builder_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csrbank0_reset0_r;
reg           builder_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csrbank0_reset0_w;
reg           builder_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csrbank0_scratch0_r;
reg           builder_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csrbank0_scratch0_w;
reg           builder_csrbank0_scratch0_we = 1'd0;
wire          builder_csrbank0_sel;
wire    [2:0] builder_csrbank1_out0_r;
reg           builder_csrbank1_out0_re = 1'd0;
wire    [2:0] builder_csrbank1_out0_w;
reg           builder_csrbank1_out0_we = 1'd0;
wire          builder_csrbank1_sel;
wire    [1:0] builder_csrbank2_ev_enable0_r;
reg           builder_csrbank2_ev_enable0_re = 1'd0;
wire    [1:0] builder_csrbank2_ev_enable0_w;
reg           builder_csrbank2_ev_enable0_we = 1'd0;
wire    [1:0] builder_csrbank2_ev_pending_r;
reg           builder_csrbank2_ev_pending_re = 1'd0;
wire    [1:0] builder_csrbank2_ev_pending_w;
reg           builder_csrbank2_ev_pending_we = 1'd0;
wire    [1:0] builder_csrbank2_ev_status_r;
reg           builder_csrbank2_ev_status_re = 1'd0;
wire    [1:0] builder_csrbank2_ev_status_w;
reg           builder_csrbank2_ev_status_we = 1'd0;
wire          builder_csrbank2_rxempty_r;
reg           builder_csrbank2_rxempty_re = 1'd0;
wire          builder_csrbank2_rxempty_w;
reg           builder_csrbank2_rxempty_we = 1'd0;
wire          builder_csrbank2_rxfull_r;
reg           builder_csrbank2_rxfull_re = 1'd0;
wire          builder_csrbank2_rxfull_w;
reg           builder_csrbank2_rxfull_we = 1'd0;
wire          builder_csrbank2_sel;
wire          builder_csrbank2_txempty_r;
reg           builder_csrbank2_txempty_re = 1'd0;
wire          builder_csrbank2_txempty_w;
reg           builder_csrbank2_txempty_we = 1'd0;
wire          builder_csrbank2_txfull_r;
reg           builder_csrbank2_txfull_re = 1'd0;
wire          builder_csrbank2_txfull_w;
reg           builder_csrbank2_txfull_we = 1'd0;
wire          builder_csrbank3_en0_r;
reg           builder_csrbank3_en0_re = 1'd0;
wire          builder_csrbank3_en0_w;
reg           builder_csrbank3_en0_we = 1'd0;
wire          builder_csrbank3_ev_enable0_r;
reg           builder_csrbank3_ev_enable0_re = 1'd0;
wire          builder_csrbank3_ev_enable0_w;
reg           builder_csrbank3_ev_enable0_we = 1'd0;
wire          builder_csrbank3_ev_pending_r;
reg           builder_csrbank3_ev_pending_re = 1'd0;
wire          builder_csrbank3_ev_pending_w;
reg           builder_csrbank3_ev_pending_we = 1'd0;
wire          builder_csrbank3_ev_status_r;
reg           builder_csrbank3_ev_status_re = 1'd0;
wire          builder_csrbank3_ev_status_w;
reg           builder_csrbank3_ev_status_we = 1'd0;
wire   [31:0] builder_csrbank3_load0_r;
reg           builder_csrbank3_load0_re = 1'd0;
wire   [31:0] builder_csrbank3_load0_w;
reg           builder_csrbank3_load0_we = 1'd0;
wire   [31:0] builder_csrbank3_reload0_r;
reg           builder_csrbank3_reload0_re = 1'd0;
wire   [31:0] builder_csrbank3_reload0_w;
reg           builder_csrbank3_reload0_we = 1'd0;
wire          builder_csrbank3_sel;
wire          builder_csrbank3_update_value0_r;
reg           builder_csrbank3_update_value0_re = 1'd0;
wire          builder_csrbank3_update_value0_w;
reg           builder_csrbank3_update_value0_we = 1'd0;
wire   [31:0] builder_csrbank3_value_r;
reg           builder_csrbank3_value_re = 1'd0;
wire   [31:0] builder_csrbank3_value_w;
reg           builder_csrbank3_value_we = 1'd0;
wire   [31:0] builder_dat_r;
wire   [31:0] builder_dat_w;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_femtorv_next_state = 1'd0;
reg           builder_femtorv_state = 1'd0;
wire          builder_grant;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire   [13:0] builder_interface0_bank_bus_adr;
reg    [31:0] builder_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface0_bank_bus_dat_w;
wire          builder_interface0_bank_bus_re;
wire          builder_interface0_bank_bus_we;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [13:0] builder_interface1_bank_bus_adr;
reg    [31:0] builder_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface1_bank_bus_dat_w;
wire          builder_interface1_bank_bus_re;
wire          builder_interface1_bank_bus_we;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
wire   [13:0] builder_interface2_bank_bus_adr;
reg    [31:0] builder_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface2_bank_bus_dat_w;
wire          builder_interface2_bank_bus_re;
wire          builder_interface2_bank_bus_we;
wire   [13:0] builder_interface3_bank_bus_adr;
reg    [31:0] builder_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface3_bank_bus_dat_w;
wire          builder_interface3_bank_bus_re;
wire          builder_interface3_bank_bus_we;
wire          builder_re;
reg           builder_regs0 = 1'd0;
reg           builder_regs1 = 1'd0;
wire          builder_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [2:0] builder_slave_sel = 3'd0;
reg     [2:0] builder_slave_sel_r = 3'd0;
wire          builder_wait;
wire          builder_we;
reg           builder_wishbone2csr_next_state = 1'd0;
reg           builder_wishbone2csr_state = 1'd0;
wire          main_minimalsoc_adapted_interface_ack;
wire   [29:0] main_minimalsoc_adapted_interface_adr;
wire    [1:0] main_minimalsoc_adapted_interface_bte;
wire    [2:0] main_minimalsoc_adapted_interface_cti;
wire          main_minimalsoc_adapted_interface_cyc;
wire   [31:0] main_minimalsoc_adapted_interface_dat_r;
wire   [31:0] main_minimalsoc_adapted_interface_dat_w;
wire          main_minimalsoc_adapted_interface_err;
wire    [3:0] main_minimalsoc_adapted_interface_sel;
wire          main_minimalsoc_adapted_interface_stb;
wire          main_minimalsoc_adapted_interface_we;
wire          main_minimalsoc_bus_error;
reg    [31:0] main_minimalsoc_bus_errors = 32'd0;
reg           main_minimalsoc_bus_errors_re = 1'd0;
wire   [31:0] main_minimalsoc_bus_errors_status;
wire          main_minimalsoc_bus_errors_we;
wire          main_minimalsoc_cpu_rst;
reg           main_minimalsoc_enable_re = 1'd0;
reg     [1:0] main_minimalsoc_enable_storage = 2'd0;
wire          main_minimalsoc_idbus_ack;
reg    [31:0] main_minimalsoc_idbus_adr = 32'd0;
reg    [31:0] main_minimalsoc_idbus_adr_next_value0 = 32'd0;
reg           main_minimalsoc_idbus_adr_next_value_ce0 = 1'd0;
reg     [1:0] main_minimalsoc_idbus_bte = 2'd0;
reg     [2:0] main_minimalsoc_idbus_cti = 3'd0;
reg           main_minimalsoc_idbus_cyc = 1'd0;
wire   [31:0] main_minimalsoc_idbus_dat_r;
reg    [31:0] main_minimalsoc_idbus_dat_w = 32'd0;
reg    [31:0] main_minimalsoc_idbus_dat_w_next_value1 = 32'd0;
reg           main_minimalsoc_idbus_dat_w_next_value_ce1 = 1'd0;
wire          main_minimalsoc_idbus_err;
reg     [3:0] main_minimalsoc_idbus_sel = 4'd0;
reg     [3:0] main_minimalsoc_idbus_sel_next_value2 = 4'd0;
reg           main_minimalsoc_idbus_sel_next_value_ce2 = 1'd0;
reg           main_minimalsoc_idbus_stb = 1'd0;
reg           main_minimalsoc_idbus_we = 1'd0;
reg           main_minimalsoc_idbus_we_next_value3 = 1'd0;
reg           main_minimalsoc_idbus_we_next_value_ce3 = 1'd0;
wire          main_minimalsoc_irq;
reg           main_minimalsoc_latch = 1'd0;
wire   [31:0] main_minimalsoc_mbus_addr;
reg           main_minimalsoc_mbus_rbusy = 1'd0;
reg    [31:0] main_minimalsoc_mbus_rdata0 = 32'd0;
reg    [31:0] main_minimalsoc_mbus_rdata1 = 32'd0;
wire          main_minimalsoc_mbus_rstrb;
reg           main_minimalsoc_mbus_wbusy = 1'd0;
wire   [31:0] main_minimalsoc_mbus_wdata;
wire    [3:0] main_minimalsoc_mbus_wmask;
wire    [6:0] main_minimalsoc_minimalsoc_adr;
reg           main_minimalsoc_minimalsoc_adr_burst = 1'd0;
wire   [31:0] main_minimalsoc_minimalsoc_dat_r;
reg           main_minimalsoc_minimalsoc_ram_bus_ack = 1'd0;
wire   [29:0] main_minimalsoc_minimalsoc_ram_bus_adr;
wire    [1:0] main_minimalsoc_minimalsoc_ram_bus_bte;
wire    [2:0] main_minimalsoc_minimalsoc_ram_bus_cti;
wire          main_minimalsoc_minimalsoc_ram_bus_cyc;
wire   [31:0] main_minimalsoc_minimalsoc_ram_bus_dat_r;
wire   [31:0] main_minimalsoc_minimalsoc_ram_bus_dat_w;
reg           main_minimalsoc_minimalsoc_ram_bus_err = 1'd0;
wire    [3:0] main_minimalsoc_minimalsoc_ram_bus_sel;
wire          main_minimalsoc_minimalsoc_ram_bus_stb;
wire          main_minimalsoc_minimalsoc_ram_bus_we;
reg     [1:0] main_minimalsoc_pending_r = 2'd0;
reg           main_minimalsoc_pending_re = 1'd0;
reg     [1:0] main_minimalsoc_pending_status = 2'd0;
wire          main_minimalsoc_pending_we;
wire   [10:0] main_minimalsoc_ram_adr;
reg           main_minimalsoc_ram_adr_burst = 1'd0;
reg           main_minimalsoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_minimalsoc_ram_bus_ram_bus_adr;
wire    [1:0] main_minimalsoc_ram_bus_ram_bus_bte;
wire    [2:0] main_minimalsoc_ram_bus_ram_bus_cti;
wire          main_minimalsoc_ram_bus_ram_bus_cyc;
wire   [31:0] main_minimalsoc_ram_bus_ram_bus_dat_r;
wire   [31:0] main_minimalsoc_ram_bus_ram_bus_dat_w;
reg           main_minimalsoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_minimalsoc_ram_bus_ram_bus_sel;
wire          main_minimalsoc_ram_bus_ram_bus_stb;
wire          main_minimalsoc_ram_bus_ram_bus_we;
wire   [31:0] main_minimalsoc_ram_dat_r;
wire   [31:0] main_minimalsoc_ram_dat_w;
reg     [3:0] main_minimalsoc_ram_we = 4'd0;
wire          main_minimalsoc_reset;
reg           main_minimalsoc_reset_re = 1'd0;
reg     [1:0] main_minimalsoc_reset_storage = 2'd0;
wire          main_minimalsoc_rx0;
wire          main_minimalsoc_rx1;
wire          main_minimalsoc_rx2;
reg           main_minimalsoc_rx_clear = 1'd0;
reg     [3:0] main_minimalsoc_rx_count = 4'd0;
reg     [3:0] main_minimalsoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_minimalsoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_minimalsoc_rx_data = 8'd0;
reg     [7:0] main_minimalsoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_minimalsoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_minimalsoc_rx_enable = 1'd0;
reg     [3:0] main_minimalsoc_rx_fifo_consume = 4'd0;
wire          main_minimalsoc_rx_fifo_do_read;
wire          main_minimalsoc_rx_fifo_fifo_in_first;
wire          main_minimalsoc_rx_fifo_fifo_in_last;
wire    [7:0] main_minimalsoc_rx_fifo_fifo_in_payload_data;
wire          main_minimalsoc_rx_fifo_fifo_out_first;
wire          main_minimalsoc_rx_fifo_fifo_out_last;
wire    [7:0] main_minimalsoc_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_minimalsoc_rx_fifo_level0 = 5'd0;
wire    [4:0] main_minimalsoc_rx_fifo_level1;
reg     [3:0] main_minimalsoc_rx_fifo_produce = 4'd0;
wire    [3:0] main_minimalsoc_rx_fifo_rdport_adr;
wire    [9:0] main_minimalsoc_rx_fifo_rdport_dat_r;
wire          main_minimalsoc_rx_fifo_rdport_re;
wire          main_minimalsoc_rx_fifo_re;
reg           main_minimalsoc_rx_fifo_readable = 1'd0;
reg           main_minimalsoc_rx_fifo_replace = 1'd0;
wire          main_minimalsoc_rx_fifo_sink_first;
wire          main_minimalsoc_rx_fifo_sink_last;
wire    [7:0] main_minimalsoc_rx_fifo_sink_payload_data;
wire          main_minimalsoc_rx_fifo_sink_ready;
wire          main_minimalsoc_rx_fifo_sink_valid;
wire          main_minimalsoc_rx_fifo_source_first;
wire          main_minimalsoc_rx_fifo_source_last;
wire    [7:0] main_minimalsoc_rx_fifo_source_payload_data;
wire          main_minimalsoc_rx_fifo_source_ready;
wire          main_minimalsoc_rx_fifo_source_valid;
wire    [9:0] main_minimalsoc_rx_fifo_syncfifo_din;
wire    [9:0] main_minimalsoc_rx_fifo_syncfifo_dout;
wire          main_minimalsoc_rx_fifo_syncfifo_re;
wire          main_minimalsoc_rx_fifo_syncfifo_readable;
wire          main_minimalsoc_rx_fifo_syncfifo_we;
wire          main_minimalsoc_rx_fifo_syncfifo_writable;
reg     [3:0] main_minimalsoc_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_minimalsoc_rx_fifo_wrport_dat_r;
wire    [9:0] main_minimalsoc_rx_fifo_wrport_dat_w;
wire          main_minimalsoc_rx_fifo_wrport_we;
reg           main_minimalsoc_rx_pending = 1'd0;
reg    [31:0] main_minimalsoc_rx_phase = 32'd0;
wire          main_minimalsoc_rx_rx;
reg           main_minimalsoc_rx_rx_d = 1'd0;
reg           main_minimalsoc_rx_source_first = 1'd0;
reg           main_minimalsoc_rx_source_last = 1'd0;
reg     [7:0] main_minimalsoc_rx_source_payload_data = 8'd0;
wire          main_minimalsoc_rx_source_ready;
reg           main_minimalsoc_rx_source_valid = 1'd0;
wire          main_minimalsoc_rx_status;
reg           main_minimalsoc_rx_tick = 1'd0;
wire          main_minimalsoc_rx_trigger;
reg           main_minimalsoc_rx_trigger_d = 1'd0;
reg           main_minimalsoc_rxempty_re = 1'd0;
wire          main_minimalsoc_rxempty_status;
wire          main_minimalsoc_rxempty_we;
reg           main_minimalsoc_rxfull_re = 1'd0;
wire          main_minimalsoc_rxfull_status;
wire          main_minimalsoc_rxfull_we;
wire    [7:0] main_minimalsoc_rxtx_r;
reg           main_minimalsoc_rxtx_re = 1'd0;
wire    [7:0] main_minimalsoc_rxtx_w;
reg           main_minimalsoc_rxtx_we = 1'd0;
reg           main_minimalsoc_scratch_re = 1'd0;
reg    [31:0] main_minimalsoc_scratch_storage = 32'd305419896;
reg           main_minimalsoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_minimalsoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_minimalsoc_soc_rst = 1'd0;
reg           main_minimalsoc_status_re = 1'd0;
reg     [1:0] main_minimalsoc_status_status = 2'd0;
wire          main_minimalsoc_status_we;
wire          main_minimalsoc_tx0;
wire          main_minimalsoc_tx1;
wire          main_minimalsoc_tx2;
reg           main_minimalsoc_tx_clear = 1'd0;
reg     [3:0] main_minimalsoc_tx_count = 4'd0;
reg     [3:0] main_minimalsoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_minimalsoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_minimalsoc_tx_data = 8'd0;
reg     [7:0] main_minimalsoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_minimalsoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_minimalsoc_tx_enable = 1'd0;
reg     [3:0] main_minimalsoc_tx_fifo_consume = 4'd0;
wire          main_minimalsoc_tx_fifo_do_read;
wire          main_minimalsoc_tx_fifo_fifo_in_first;
wire          main_minimalsoc_tx_fifo_fifo_in_last;
wire    [7:0] main_minimalsoc_tx_fifo_fifo_in_payload_data;
wire          main_minimalsoc_tx_fifo_fifo_out_first;
wire          main_minimalsoc_tx_fifo_fifo_out_last;
wire    [7:0] main_minimalsoc_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_minimalsoc_tx_fifo_level0 = 5'd0;
wire    [4:0] main_minimalsoc_tx_fifo_level1;
reg     [3:0] main_minimalsoc_tx_fifo_produce = 4'd0;
wire    [3:0] main_minimalsoc_tx_fifo_rdport_adr;
wire    [9:0] main_minimalsoc_tx_fifo_rdport_dat_r;
wire          main_minimalsoc_tx_fifo_rdport_re;
wire          main_minimalsoc_tx_fifo_re;
reg           main_minimalsoc_tx_fifo_readable = 1'd0;
reg           main_minimalsoc_tx_fifo_replace = 1'd0;
reg           main_minimalsoc_tx_fifo_sink_first = 1'd0;
reg           main_minimalsoc_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_minimalsoc_tx_fifo_sink_payload_data;
wire          main_minimalsoc_tx_fifo_sink_ready;
wire          main_minimalsoc_tx_fifo_sink_valid;
wire          main_minimalsoc_tx_fifo_source_first;
wire          main_minimalsoc_tx_fifo_source_last;
wire    [7:0] main_minimalsoc_tx_fifo_source_payload_data;
wire          main_minimalsoc_tx_fifo_source_ready;
wire          main_minimalsoc_tx_fifo_source_valid;
wire    [9:0] main_minimalsoc_tx_fifo_syncfifo_din;
wire    [9:0] main_minimalsoc_tx_fifo_syncfifo_dout;
wire          main_minimalsoc_tx_fifo_syncfifo_re;
wire          main_minimalsoc_tx_fifo_syncfifo_readable;
wire          main_minimalsoc_tx_fifo_syncfifo_we;
wire          main_minimalsoc_tx_fifo_syncfifo_writable;
reg     [3:0] main_minimalsoc_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_minimalsoc_tx_fifo_wrport_dat_r;
wire    [9:0] main_minimalsoc_tx_fifo_wrport_dat_w;
wire          main_minimalsoc_tx_fifo_wrport_we;
reg           main_minimalsoc_tx_pending = 1'd0;
reg    [31:0] main_minimalsoc_tx_phase = 32'd0;
wire          main_minimalsoc_tx_sink_first;
wire          main_minimalsoc_tx_sink_last;
wire    [7:0] main_minimalsoc_tx_sink_payload_data;
reg           main_minimalsoc_tx_sink_ready = 1'd0;
wire          main_minimalsoc_tx_sink_valid;
wire          main_minimalsoc_tx_status;
reg           main_minimalsoc_tx_tick = 1'd0;
wire          main_minimalsoc_tx_trigger;
reg           main_minimalsoc_tx_trigger_d = 1'd0;
reg           main_minimalsoc_txempty_re = 1'd0;
wire          main_minimalsoc_txempty_status;
wire          main_minimalsoc_txempty_we;
reg           main_minimalsoc_txfull_re = 1'd0;
wire          main_minimalsoc_txfull_status;
wire          main_minimalsoc_txfull_we;
wire          main_minimalsoc_uart_sink_first;
wire          main_minimalsoc_uart_sink_last;
wire    [7:0] main_minimalsoc_uart_sink_payload_data;
wire          main_minimalsoc_uart_sink_ready;
wire          main_minimalsoc_uart_sink_valid;
wire          main_minimalsoc_uart_source_first;
wire          main_minimalsoc_uart_source_last;
wire    [7:0] main_minimalsoc_uart_source_payload_data;
wire          main_minimalsoc_uart_source_ready;
wire          main_minimalsoc_uart_source_valid;
reg           main_re = 1'd0;
reg     [2:0] main_storage = 3'd0;
reg           main_timer0_en_re = 1'd0;
reg           main_timer0_en_storage = 1'd0;
reg           main_timer0_enable_re = 1'd0;
reg           main_timer0_enable_storage = 1'd0;
wire          main_timer0_irq;
reg           main_timer0_load_re = 1'd0;
reg    [31:0] main_timer0_load_storage = 32'd0;
reg           main_timer0_pending_r = 1'd0;
reg           main_timer0_pending_re = 1'd0;
wire          main_timer0_pending_status;
wire          main_timer0_pending_we;
reg           main_timer0_reload_re = 1'd0;
reg    [31:0] main_timer0_reload_storage = 32'd0;
reg           main_timer0_status_re = 1'd0;
wire          main_timer0_status_status;
wire          main_timer0_status_we;
reg           main_timer0_update_value_re = 1'd0;
reg           main_timer0_update_value_storage = 1'd0;
reg    [31:0] main_timer0_value = 32'd0;
reg           main_timer0_value_re = 1'd0;
reg    [31:0] main_timer0_value_status = 32'd0;
wire          main_timer0_value_we;
wire          main_timer0_zero0;
wire          main_timer0_zero1;
wire          main_timer0_zero2;
reg           main_timer0_zero_clear = 1'd0;
reg           main_timer0_zero_pending = 1'd0;
wire          main_timer0_zero_status;
wire          main_timer0_zero_trigger;
reg           main_timer0_zero_trigger_d = 1'd0;
wire          sys_clk;
reg           sys_rst = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_minimalsoc_reset = (main_minimalsoc_soc_rst | main_minimalsoc_cpu_rst);
assign main_minimalsoc_bus_error = builder_error;
assign sys_clk = clk12;
assign main_minimalsoc_adapted_interface_dat_w = main_minimalsoc_idbus_dat_w;
assign main_minimalsoc_idbus_dat_r = main_minimalsoc_adapted_interface_dat_r;
assign main_minimalsoc_adapted_interface_sel = main_minimalsoc_idbus_sel;
assign main_minimalsoc_adapted_interface_cyc = main_minimalsoc_idbus_cyc;
assign main_minimalsoc_adapted_interface_stb = main_minimalsoc_idbus_stb;
assign main_minimalsoc_idbus_ack = main_minimalsoc_adapted_interface_ack;
assign main_minimalsoc_adapted_interface_we = main_minimalsoc_idbus_we;
assign main_minimalsoc_adapted_interface_cti = main_minimalsoc_idbus_cti;
assign main_minimalsoc_adapted_interface_bte = main_minimalsoc_idbus_bte;
assign main_minimalsoc_idbus_err = main_minimalsoc_adapted_interface_err;
assign main_minimalsoc_adapted_interface_adr = main_minimalsoc_idbus_adr[31:2];
assign builder_shared_adr = builder_array_muxed0;
assign builder_shared_dat_w = builder_array_muxed1;
assign builder_shared_sel = builder_array_muxed2;
assign builder_shared_cyc = builder_array_muxed3;
assign builder_shared_stb = builder_array_muxed4;
assign builder_shared_we = builder_array_muxed5;
assign builder_shared_cti = builder_array_muxed6;
assign builder_shared_bte = builder_array_muxed7;
assign main_minimalsoc_adapted_interface_dat_r = builder_shared_dat_r;
assign main_minimalsoc_adapted_interface_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_minimalsoc_adapted_interface_err = (builder_shared_err & (builder_grant == 1'd0));
assign builder_request = {main_minimalsoc_adapted_interface_cyc};
assign builder_grant = 1'd0;
always @(*) begin
    builder_slave_sel <= 3'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:7] == 1'd0);
    builder_slave_sel[1] <= (builder_shared_adr[29:11] == 18'd131072);
    builder_slave_sel[2] <= (builder_shared_adr[29:14] == 16'd33280);
end
assign main_minimalsoc_minimalsoc_ram_bus_adr = builder_shared_adr;
assign main_minimalsoc_minimalsoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_minimalsoc_minimalsoc_ram_bus_sel = builder_shared_sel;
assign main_minimalsoc_minimalsoc_ram_bus_stb = builder_shared_stb;
assign main_minimalsoc_minimalsoc_ram_bus_we = builder_shared_we;
assign main_minimalsoc_minimalsoc_ram_bus_cti = builder_shared_cti;
assign main_minimalsoc_minimalsoc_ram_bus_bte = builder_shared_bte;
assign main_minimalsoc_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_minimalsoc_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_minimalsoc_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_minimalsoc_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_minimalsoc_ram_bus_ram_bus_we = builder_shared_we;
assign main_minimalsoc_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_minimalsoc_ram_bus_ram_bus_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_minimalsoc_minimalsoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_minimalsoc_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_shared_err = ((main_minimalsoc_minimalsoc_ram_bus_err | main_minimalsoc_ram_bus_ram_bus_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= ((main_minimalsoc_minimalsoc_ram_bus_ack | main_minimalsoc_ram_bus_ram_bus_ack) | builder_interface0_ack);
    builder_shared_dat_r <= ((({32{builder_slave_sel_r[0]}} & main_minimalsoc_minimalsoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_minimalsoc_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_minimalsoc_bus_errors_status = main_minimalsoc_bus_errors;
always @(*) begin
    main_minimalsoc_mbus_rdata0 <= 32'd0;
    main_minimalsoc_mbus_rdata0 <= main_minimalsoc_mbus_rdata1;
    if (main_minimalsoc_latch) begin
        main_minimalsoc_mbus_rdata0 <= main_minimalsoc_idbus_dat_r;
    end
end
always @(*) begin
    builder_femtorv_next_state <= 1'd0;
    main_minimalsoc_idbus_adr_next_value0 <= 32'd0;
    main_minimalsoc_idbus_adr_next_value_ce0 <= 1'd0;
    main_minimalsoc_idbus_cyc <= 1'd0;
    main_minimalsoc_idbus_dat_w_next_value1 <= 32'd0;
    main_minimalsoc_idbus_dat_w_next_value_ce1 <= 1'd0;
    main_minimalsoc_idbus_sel_next_value2 <= 4'd0;
    main_minimalsoc_idbus_sel_next_value_ce2 <= 1'd0;
    main_minimalsoc_idbus_stb <= 1'd0;
    main_minimalsoc_idbus_we_next_value3 <= 1'd0;
    main_minimalsoc_idbus_we_next_value_ce3 <= 1'd0;
    main_minimalsoc_latch <= 1'd0;
    main_minimalsoc_mbus_rbusy <= 1'd0;
    main_minimalsoc_mbus_wbusy <= 1'd0;
    builder_femtorv_next_state <= builder_femtorv_state;
    case (builder_femtorv_state)
        1'd1: begin
            main_minimalsoc_idbus_stb <= 1'd1;
            main_minimalsoc_idbus_cyc <= 1'd1;
            main_minimalsoc_mbus_wbusy <= 1'd1;
            main_minimalsoc_mbus_rbusy <= 1'd1;
            if (main_minimalsoc_idbus_ack) begin
                main_minimalsoc_mbus_wbusy <= 1'd0;
                main_minimalsoc_mbus_rbusy <= 1'd0;
                main_minimalsoc_latch <= 1'd1;
                builder_femtorv_next_state <= 1'd0;
            end
        end
        default: begin
            main_minimalsoc_idbus_adr_next_value0 <= main_minimalsoc_mbus_addr;
            main_minimalsoc_idbus_adr_next_value_ce0 <= 1'd1;
            main_minimalsoc_idbus_dat_w_next_value1 <= main_minimalsoc_mbus_wdata;
            main_minimalsoc_idbus_dat_w_next_value_ce1 <= 1'd1;
            main_minimalsoc_idbus_sel_next_value2 <= main_minimalsoc_mbus_wmask;
            main_minimalsoc_idbus_sel_next_value_ce2 <= 1'd1;
            if ((main_minimalsoc_mbus_rstrb | (main_minimalsoc_mbus_wmask != 1'd0))) begin
                main_minimalsoc_idbus_we_next_value3 <= (main_minimalsoc_mbus_wmask != 1'd0);
                main_minimalsoc_idbus_we_next_value_ce3 <= 1'd1;
                builder_femtorv_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_minimalsoc_minimalsoc_adr = main_minimalsoc_minimalsoc_ram_bus_adr[6:0];
assign main_minimalsoc_minimalsoc_ram_bus_dat_r = main_minimalsoc_minimalsoc_dat_r;
always @(*) begin
    main_minimalsoc_ram_we <= 4'd0;
    main_minimalsoc_ram_we[0] <= (((main_minimalsoc_ram_bus_ram_bus_cyc & main_minimalsoc_ram_bus_ram_bus_stb) & main_minimalsoc_ram_bus_ram_bus_we) & main_minimalsoc_ram_bus_ram_bus_sel[0]);
    main_minimalsoc_ram_we[1] <= (((main_minimalsoc_ram_bus_ram_bus_cyc & main_minimalsoc_ram_bus_ram_bus_stb) & main_minimalsoc_ram_bus_ram_bus_we) & main_minimalsoc_ram_bus_ram_bus_sel[1]);
    main_minimalsoc_ram_we[2] <= (((main_minimalsoc_ram_bus_ram_bus_cyc & main_minimalsoc_ram_bus_ram_bus_stb) & main_minimalsoc_ram_bus_ram_bus_we) & main_minimalsoc_ram_bus_ram_bus_sel[2]);
    main_minimalsoc_ram_we[3] <= (((main_minimalsoc_ram_bus_ram_bus_cyc & main_minimalsoc_ram_bus_ram_bus_stb) & main_minimalsoc_ram_bus_ram_bus_we) & main_minimalsoc_ram_bus_ram_bus_sel[3]);
end
assign main_minimalsoc_ram_adr = main_minimalsoc_ram_bus_ram_bus_adr[10:0];
assign main_minimalsoc_ram_bus_ram_bus_dat_r = main_minimalsoc_ram_dat_r;
assign main_minimalsoc_ram_dat_w = main_minimalsoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_minimalsoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_minimalsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_minimalsoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_minimalsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_minimalsoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_minimalsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_minimalsoc_tx_enable <= 1'd0;
    main_minimalsoc_tx_sink_ready <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_minimalsoc_tx_enable <= 1'd1;
            if (main_minimalsoc_tx_tick) begin
                main_minimalsoc_serial_tx_rs232phytx_next_value1 <= main_minimalsoc_tx_data[0];
                main_minimalsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_minimalsoc_tx_count_rs232phytx_next_value0 <= (main_minimalsoc_tx_count + 1'd1);
                main_minimalsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_minimalsoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_minimalsoc_tx_data[7:1]};
                main_minimalsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_minimalsoc_tx_count == 4'd9)) begin
                    main_minimalsoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_minimalsoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_minimalsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_minimalsoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_minimalsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_minimalsoc_tx_sink_valid) begin
                main_minimalsoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_minimalsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_minimalsoc_tx_data_rs232phytx_next_value2 <= main_minimalsoc_tx_sink_payload_data;
                main_minimalsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_minimalsoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_minimalsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_minimalsoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_minimalsoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_minimalsoc_rx_enable <= 1'd0;
    main_minimalsoc_rx_source_payload_data <= 8'd0;
    main_minimalsoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_minimalsoc_rx_enable <= 1'd1;
            if (main_minimalsoc_rx_tick) begin
                main_minimalsoc_rx_count_rs232phyrx_next_value0 <= (main_minimalsoc_rx_count + 1'd1);
                main_minimalsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_minimalsoc_rx_data_rs232phyrx_next_value1 <= {main_minimalsoc_rx_rx, main_minimalsoc_rx_data[7:1]};
                main_minimalsoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_minimalsoc_rx_count == 4'd9)) begin
                    main_minimalsoc_rx_source_valid <= (main_minimalsoc_rx_rx == 1'd1);
                    main_minimalsoc_rx_source_payload_data <= main_minimalsoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_minimalsoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_minimalsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_minimalsoc_rx_rx == 1'd0) & (main_minimalsoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_minimalsoc_uart_sink_valid = main_minimalsoc_rx_source_valid;
assign main_minimalsoc_rx_source_ready = main_minimalsoc_uart_sink_ready;
assign main_minimalsoc_uart_sink_first = main_minimalsoc_rx_source_first;
assign main_minimalsoc_uart_sink_last = main_minimalsoc_rx_source_last;
assign main_minimalsoc_uart_sink_payload_data = main_minimalsoc_rx_source_payload_data;
assign main_minimalsoc_tx_sink_valid = main_minimalsoc_uart_source_valid;
assign main_minimalsoc_uart_source_ready = main_minimalsoc_tx_sink_ready;
assign main_minimalsoc_tx_sink_first = main_minimalsoc_uart_source_first;
assign main_minimalsoc_tx_sink_last = main_minimalsoc_uart_source_last;
assign main_minimalsoc_tx_sink_payload_data = main_minimalsoc_uart_source_payload_data;
assign main_minimalsoc_tx_fifo_sink_valid = main_minimalsoc_rxtx_re;
assign main_minimalsoc_tx_fifo_sink_payload_data = main_minimalsoc_rxtx_r;
assign main_minimalsoc_uart_source_valid = main_minimalsoc_tx_fifo_source_valid;
assign main_minimalsoc_tx_fifo_source_ready = main_minimalsoc_uart_source_ready;
assign main_minimalsoc_uart_source_first = main_minimalsoc_tx_fifo_source_first;
assign main_minimalsoc_uart_source_last = main_minimalsoc_tx_fifo_source_last;
assign main_minimalsoc_uart_source_payload_data = main_minimalsoc_tx_fifo_source_payload_data;
assign main_minimalsoc_txfull_status = (~main_minimalsoc_tx_fifo_sink_ready);
assign main_minimalsoc_txempty_status = (~main_minimalsoc_tx_fifo_source_valid);
assign main_minimalsoc_tx_trigger = main_minimalsoc_tx_fifo_sink_ready;
assign main_minimalsoc_rx_fifo_sink_valid = main_minimalsoc_uart_sink_valid;
assign main_minimalsoc_uart_sink_ready = main_minimalsoc_rx_fifo_sink_ready;
assign main_minimalsoc_rx_fifo_sink_first = main_minimalsoc_uart_sink_first;
assign main_minimalsoc_rx_fifo_sink_last = main_minimalsoc_uart_sink_last;
assign main_minimalsoc_rx_fifo_sink_payload_data = main_minimalsoc_uart_sink_payload_data;
assign main_minimalsoc_rxtx_w = main_minimalsoc_rx_fifo_source_payload_data;
assign main_minimalsoc_rx_fifo_source_ready = (main_minimalsoc_rx_clear | (1'd0 & main_minimalsoc_rxtx_we));
assign main_minimalsoc_rxempty_status = (~main_minimalsoc_rx_fifo_source_valid);
assign main_minimalsoc_rxfull_status = (~main_minimalsoc_rx_fifo_sink_ready);
assign main_minimalsoc_rx_trigger = main_minimalsoc_rx_fifo_source_valid;
assign main_minimalsoc_tx0 = main_minimalsoc_tx_status;
assign main_minimalsoc_tx1 = main_minimalsoc_tx_pending;
always @(*) begin
    main_minimalsoc_tx_clear <= 1'd0;
    if ((main_minimalsoc_pending_re & main_minimalsoc_pending_r[0])) begin
        main_minimalsoc_tx_clear <= 1'd1;
    end
end
assign main_minimalsoc_rx0 = main_minimalsoc_rx_status;
assign main_minimalsoc_rx1 = main_minimalsoc_rx_pending;
always @(*) begin
    main_minimalsoc_rx_clear <= 1'd0;
    if ((main_minimalsoc_pending_re & main_minimalsoc_pending_r[1])) begin
        main_minimalsoc_rx_clear <= 1'd1;
    end
end
assign main_minimalsoc_irq = ((main_minimalsoc_pending_status[0] & main_minimalsoc_enable_storage[0]) | (main_minimalsoc_pending_status[1] & main_minimalsoc_enable_storage[1]));
assign main_minimalsoc_tx_status = main_minimalsoc_tx_trigger;
assign main_minimalsoc_rx_status = main_minimalsoc_rx_trigger;
assign main_minimalsoc_tx_fifo_syncfifo_din = {main_minimalsoc_tx_fifo_fifo_in_last, main_minimalsoc_tx_fifo_fifo_in_first, main_minimalsoc_tx_fifo_fifo_in_payload_data};
assign {main_minimalsoc_tx_fifo_fifo_out_last, main_minimalsoc_tx_fifo_fifo_out_first, main_minimalsoc_tx_fifo_fifo_out_payload_data} = main_minimalsoc_tx_fifo_syncfifo_dout;
assign main_minimalsoc_tx_fifo_sink_ready = main_minimalsoc_tx_fifo_syncfifo_writable;
assign main_minimalsoc_tx_fifo_syncfifo_we = main_minimalsoc_tx_fifo_sink_valid;
assign main_minimalsoc_tx_fifo_fifo_in_first = main_minimalsoc_tx_fifo_sink_first;
assign main_minimalsoc_tx_fifo_fifo_in_last = main_minimalsoc_tx_fifo_sink_last;
assign main_minimalsoc_tx_fifo_fifo_in_payload_data = main_minimalsoc_tx_fifo_sink_payload_data;
assign main_minimalsoc_tx_fifo_source_valid = main_minimalsoc_tx_fifo_readable;
assign main_minimalsoc_tx_fifo_source_first = main_minimalsoc_tx_fifo_fifo_out_first;
assign main_minimalsoc_tx_fifo_source_last = main_minimalsoc_tx_fifo_fifo_out_last;
assign main_minimalsoc_tx_fifo_source_payload_data = main_minimalsoc_tx_fifo_fifo_out_payload_data;
assign main_minimalsoc_tx_fifo_re = main_minimalsoc_tx_fifo_source_ready;
assign main_minimalsoc_tx_fifo_syncfifo_re = (main_minimalsoc_tx_fifo_syncfifo_readable & ((~main_minimalsoc_tx_fifo_readable) | main_minimalsoc_tx_fifo_re));
assign main_minimalsoc_tx_fifo_level1 = (main_minimalsoc_tx_fifo_level0 + main_minimalsoc_tx_fifo_readable);
always @(*) begin
    main_minimalsoc_tx_fifo_wrport_adr <= 4'd0;
    if (main_minimalsoc_tx_fifo_replace) begin
        main_minimalsoc_tx_fifo_wrport_adr <= (main_minimalsoc_tx_fifo_produce - 1'd1);
    end else begin
        main_minimalsoc_tx_fifo_wrport_adr <= main_minimalsoc_tx_fifo_produce;
    end
end
assign main_minimalsoc_tx_fifo_wrport_dat_w = main_minimalsoc_tx_fifo_syncfifo_din;
assign main_minimalsoc_tx_fifo_wrport_we = (main_minimalsoc_tx_fifo_syncfifo_we & (main_minimalsoc_tx_fifo_syncfifo_writable | main_minimalsoc_tx_fifo_replace));
assign main_minimalsoc_tx_fifo_do_read = (main_minimalsoc_tx_fifo_syncfifo_readable & main_minimalsoc_tx_fifo_syncfifo_re);
assign main_minimalsoc_tx_fifo_rdport_adr = main_minimalsoc_tx_fifo_consume;
assign main_minimalsoc_tx_fifo_syncfifo_dout = main_minimalsoc_tx_fifo_rdport_dat_r;
assign main_minimalsoc_tx_fifo_rdport_re = main_minimalsoc_tx_fifo_do_read;
assign main_minimalsoc_tx_fifo_syncfifo_writable = (main_minimalsoc_tx_fifo_level0 != 5'd16);
assign main_minimalsoc_tx_fifo_syncfifo_readable = (main_minimalsoc_tx_fifo_level0 != 1'd0);
assign main_minimalsoc_rx_fifo_syncfifo_din = {main_minimalsoc_rx_fifo_fifo_in_last, main_minimalsoc_rx_fifo_fifo_in_first, main_minimalsoc_rx_fifo_fifo_in_payload_data};
assign {main_minimalsoc_rx_fifo_fifo_out_last, main_minimalsoc_rx_fifo_fifo_out_first, main_minimalsoc_rx_fifo_fifo_out_payload_data} = main_minimalsoc_rx_fifo_syncfifo_dout;
assign main_minimalsoc_rx_fifo_sink_ready = main_minimalsoc_rx_fifo_syncfifo_writable;
assign main_minimalsoc_rx_fifo_syncfifo_we = main_minimalsoc_rx_fifo_sink_valid;
assign main_minimalsoc_rx_fifo_fifo_in_first = main_minimalsoc_rx_fifo_sink_first;
assign main_minimalsoc_rx_fifo_fifo_in_last = main_minimalsoc_rx_fifo_sink_last;
assign main_minimalsoc_rx_fifo_fifo_in_payload_data = main_minimalsoc_rx_fifo_sink_payload_data;
assign main_minimalsoc_rx_fifo_source_valid = main_minimalsoc_rx_fifo_readable;
assign main_minimalsoc_rx_fifo_source_first = main_minimalsoc_rx_fifo_fifo_out_first;
assign main_minimalsoc_rx_fifo_source_last = main_minimalsoc_rx_fifo_fifo_out_last;
assign main_minimalsoc_rx_fifo_source_payload_data = main_minimalsoc_rx_fifo_fifo_out_payload_data;
assign main_minimalsoc_rx_fifo_re = main_minimalsoc_rx_fifo_source_ready;
assign main_minimalsoc_rx_fifo_syncfifo_re = (main_minimalsoc_rx_fifo_syncfifo_readable & ((~main_minimalsoc_rx_fifo_readable) | main_minimalsoc_rx_fifo_re));
assign main_minimalsoc_rx_fifo_level1 = (main_minimalsoc_rx_fifo_level0 + main_minimalsoc_rx_fifo_readable);
always @(*) begin
    main_minimalsoc_rx_fifo_wrport_adr <= 4'd0;
    if (main_minimalsoc_rx_fifo_replace) begin
        main_minimalsoc_rx_fifo_wrport_adr <= (main_minimalsoc_rx_fifo_produce - 1'd1);
    end else begin
        main_minimalsoc_rx_fifo_wrport_adr <= main_minimalsoc_rx_fifo_produce;
    end
end
assign main_minimalsoc_rx_fifo_wrport_dat_w = main_minimalsoc_rx_fifo_syncfifo_din;
assign main_minimalsoc_rx_fifo_wrport_we = (main_minimalsoc_rx_fifo_syncfifo_we & (main_minimalsoc_rx_fifo_syncfifo_writable | main_minimalsoc_rx_fifo_replace));
assign main_minimalsoc_rx_fifo_do_read = (main_minimalsoc_rx_fifo_syncfifo_readable & main_minimalsoc_rx_fifo_syncfifo_re);
assign main_minimalsoc_rx_fifo_rdport_adr = main_minimalsoc_rx_fifo_consume;
assign main_minimalsoc_rx_fifo_syncfifo_dout = main_minimalsoc_rx_fifo_rdport_dat_r;
assign main_minimalsoc_rx_fifo_rdport_re = main_minimalsoc_rx_fifo_do_read;
assign main_minimalsoc_rx_fifo_syncfifo_writable = (main_minimalsoc_rx_fifo_level0 != 5'd16);
assign main_minimalsoc_rx_fifo_syncfifo_readable = (main_minimalsoc_rx_fifo_level0 != 1'd0);
assign {led_blue, led_green, led_red} = main_storage;
assign main_timer0_zero_trigger = (main_timer0_value == 1'd0);
assign main_timer0_zero0 = main_timer0_zero_status;
assign main_timer0_zero1 = main_timer0_zero_pending;
always @(*) begin
    main_timer0_zero_clear <= 1'd0;
    if ((main_timer0_pending_re & main_timer0_pending_r)) begin
        main_timer0_zero_clear <= 1'd1;
    end
end
assign main_timer0_irq = (main_timer0_pending_status & main_timer0_enable_storage);
assign main_timer0_zero_status = main_timer0_zero_trigger;
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_wishbone2csr_next_state <= 1'd0;
    builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
    case (builder_wishbone2csr_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr;
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csrbank0_sel = (builder_interface0_bank_bus_adr[13:9] == 2'd2);
assign builder_csrbank0_reset0_r = builder_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank0_reset0_re <= 1'd0;
    builder_csrbank0_reset0_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank0_reset0_re <= builder_interface0_bank_bus_we;
        builder_csrbank0_reset0_we <= builder_interface0_bank_bus_re;
    end
end
assign builder_csrbank0_scratch0_r = builder_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csrbank0_scratch0_re <= 1'd0;
    builder_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank0_scratch0_re <= builder_interface0_bank_bus_we;
        builder_csrbank0_scratch0_we <= builder_interface0_bank_bus_re;
    end
end
assign builder_csrbank0_bus_errors_r = builder_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csrbank0_bus_errors_re <= 1'd0;
    builder_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank0_bus_errors_re <= builder_interface0_bank_bus_we;
        builder_csrbank0_bus_errors_we <= builder_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_minimalsoc_soc_rst <= 1'd0;
    if (main_minimalsoc_reset_re) begin
        main_minimalsoc_soc_rst <= main_minimalsoc_reset_storage[0];
    end
end
assign main_minimalsoc_cpu_rst = main_minimalsoc_reset_storage[1];
assign builder_csrbank0_reset0_w = main_minimalsoc_reset_storage;
assign builder_csrbank0_scratch0_w = main_minimalsoc_scratch_storage;
assign builder_csrbank0_bus_errors_w = main_minimalsoc_bus_errors_status;
assign main_minimalsoc_bus_errors_we = builder_csrbank0_bus_errors_we;
assign builder_csrbank1_sel = (builder_interface1_bank_bus_adr[13:9] == 1'd0);
assign builder_csrbank1_out0_r = builder_interface1_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csrbank1_out0_re <= 1'd0;
    builder_csrbank1_out0_we <= 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank1_out0_re <= builder_interface1_bank_bus_we;
        builder_csrbank1_out0_we <= builder_interface1_bank_bus_re;
    end
end
assign builder_csrbank1_out0_w = main_storage;
assign builder_csrbank2_sel = (builder_interface2_bank_bus_adr[13:9] == 2'd3);
assign main_minimalsoc_rxtx_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    main_minimalsoc_rxtx_re <= 1'd0;
    main_minimalsoc_rxtx_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        main_minimalsoc_rxtx_re <= builder_interface2_bank_bus_we;
        main_minimalsoc_rxtx_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_txfull_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank2_txfull_re <= 1'd0;
    builder_csrbank2_txfull_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank2_txfull_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_txfull_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_rxempty_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank2_rxempty_re <= 1'd0;
    builder_csrbank2_rxempty_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank2_rxempty_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_rxempty_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_ev_status_r = builder_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank2_ev_status_re <= 1'd0;
    builder_csrbank2_ev_status_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank2_ev_status_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_ev_status_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_ev_pending_r = builder_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank2_ev_pending_re <= 1'd0;
    builder_csrbank2_ev_pending_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank2_ev_pending_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_ev_pending_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_ev_enable0_r = builder_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank2_ev_enable0_re <= 1'd0;
    builder_csrbank2_ev_enable0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank2_ev_enable0_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_ev_enable0_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_txempty_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank2_txempty_re <= 1'd0;
    builder_csrbank2_txempty_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank2_txempty_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_txempty_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_rxfull_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank2_rxfull_re <= 1'd0;
    builder_csrbank2_rxfull_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank2_rxfull_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_rxfull_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_txfull_w = main_minimalsoc_txfull_status;
assign main_minimalsoc_txfull_we = builder_csrbank2_txfull_we;
assign builder_csrbank2_rxempty_w = main_minimalsoc_rxempty_status;
assign main_minimalsoc_rxempty_we = builder_csrbank2_rxempty_we;
always @(*) begin
    main_minimalsoc_status_status <= 2'd0;
    main_minimalsoc_status_status[0] <= main_minimalsoc_tx0;
    main_minimalsoc_status_status[1] <= main_minimalsoc_rx0;
end
assign builder_csrbank2_ev_status_w = main_minimalsoc_status_status;
assign main_minimalsoc_status_we = builder_csrbank2_ev_status_we;
always @(*) begin
    main_minimalsoc_pending_status <= 2'd0;
    main_minimalsoc_pending_status[0] <= main_minimalsoc_tx1;
    main_minimalsoc_pending_status[1] <= main_minimalsoc_rx1;
end
assign builder_csrbank2_ev_pending_w = main_minimalsoc_pending_status;
assign main_minimalsoc_pending_we = builder_csrbank2_ev_pending_we;
assign main_minimalsoc_tx2 = main_minimalsoc_enable_storage[0];
assign main_minimalsoc_rx2 = main_minimalsoc_enable_storage[1];
assign builder_csrbank2_ev_enable0_w = main_minimalsoc_enable_storage;
assign builder_csrbank2_txempty_w = main_minimalsoc_txempty_status;
assign main_minimalsoc_txempty_we = builder_csrbank2_txempty_we;
assign builder_csrbank2_rxfull_w = main_minimalsoc_rxfull_status;
assign main_minimalsoc_rxfull_we = builder_csrbank2_rxfull_we;
assign builder_csrbank3_sel = (builder_interface3_bank_bus_adr[13:9] == 1'd1);
assign builder_csrbank3_load0_r = builder_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csrbank3_load0_re <= 1'd0;
    builder_csrbank3_load0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank3_load0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_load0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_reload0_r = builder_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csrbank3_reload0_re <= 1'd0;
    builder_csrbank3_reload0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank3_reload0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_reload0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_en0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_en0_re <= 1'd0;
    builder_csrbank3_en0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank3_en0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_en0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_update_value0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_update_value0_re <= 1'd0;
    builder_csrbank3_update_value0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank3_update_value0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_update_value0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_value_r = builder_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csrbank3_value_re <= 1'd0;
    builder_csrbank3_value_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank3_value_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_value_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_ev_status_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_ev_status_re <= 1'd0;
    builder_csrbank3_ev_status_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank3_ev_status_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_ev_status_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_ev_pending_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_ev_pending_re <= 1'd0;
    builder_csrbank3_ev_pending_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank3_ev_pending_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_ev_pending_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_ev_enable0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_ev_enable0_re <= 1'd0;
    builder_csrbank3_ev_enable0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank3_ev_enable0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_ev_enable0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_load0_w = main_timer0_load_storage;
assign builder_csrbank3_reload0_w = main_timer0_reload_storage;
assign builder_csrbank3_en0_w = main_timer0_en_storage;
assign builder_csrbank3_update_value0_w = main_timer0_update_value_storage;
assign builder_csrbank3_value_w = main_timer0_value_status;
assign main_timer0_value_we = builder_csrbank3_value_we;
assign main_timer0_status_status = main_timer0_zero0;
assign builder_csrbank3_ev_status_w = main_timer0_status_status;
assign main_timer0_status_we = builder_csrbank3_ev_status_we;
assign main_timer0_pending_status = main_timer0_zero1;
assign builder_csrbank3_ev_pending_w = main_timer0_pending_status;
assign main_timer0_pending_we = builder_csrbank3_ev_pending_we;
assign main_timer0_zero2 = main_timer0_enable_storage;
assign builder_csrbank3_ev_enable0_w = main_timer0_enable_storage;
assign builder_adr = builder_interface1_adr;
assign builder_re = builder_interface1_re;
assign builder_we = builder_interface1_we;
assign builder_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_dat_r;
assign builder_interface0_bank_bus_adr = builder_adr;
assign builder_interface1_bank_bus_adr = builder_adr;
assign builder_interface2_bank_bus_adr = builder_adr;
assign builder_interface3_bank_bus_adr = builder_adr;
assign builder_interface0_bank_bus_re = builder_re;
assign builder_interface1_bank_bus_re = builder_re;
assign builder_interface2_bank_bus_re = builder_re;
assign builder_interface3_bank_bus_re = builder_re;
assign builder_interface0_bank_bus_we = builder_we;
assign builder_interface1_bank_bus_we = builder_we;
assign builder_interface2_bank_bus_we = builder_we;
assign builder_interface3_bank_bus_we = builder_we;
assign builder_interface0_bank_bus_dat_w = builder_dat_w;
assign builder_interface1_bank_bus_dat_w = builder_dat_w;
assign builder_interface2_bank_bus_dat_w = builder_dat_w;
assign builder_interface3_bank_bus_dat_w = builder_dat_w;
assign builder_dat_r = (((builder_interface0_bank_bus_dat_r | builder_interface1_bank_bus_dat_r) | builder_interface2_bank_bus_dat_r) | builder_interface3_bank_bus_dat_r);
always @(*) begin
    builder_array_muxed0 <= 30'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed0 <= main_minimalsoc_adapted_interface_adr;
        end
    endcase
end
always @(*) begin
    builder_array_muxed1 <= 32'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed1 <= main_minimalsoc_adapted_interface_dat_w;
        end
    endcase
end
always @(*) begin
    builder_array_muxed2 <= 4'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed2 <= main_minimalsoc_adapted_interface_sel;
        end
    endcase
end
always @(*) begin
    builder_array_muxed3 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed3 <= main_minimalsoc_adapted_interface_cyc;
        end
    endcase
end
always @(*) begin
    builder_array_muxed4 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed4 <= main_minimalsoc_adapted_interface_stb;
        end
    endcase
end
always @(*) begin
    builder_array_muxed5 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed5 <= main_minimalsoc_adapted_interface_we;
        end
    endcase
end
always @(*) begin
    builder_array_muxed6 <= 3'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed6 <= main_minimalsoc_adapted_interface_cti;
        end
    endcase
end
always @(*) begin
    builder_array_muxed7 <= 2'd0;
    case (builder_grant)
        default: begin
            builder_array_muxed7 <= main_minimalsoc_adapted_interface_bte;
        end
    endcase
end
assign main_minimalsoc_rx_rx = builder_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_minimalsoc_bus_errors != 32'd4294967295)) begin
        if (main_minimalsoc_bus_error) begin
            main_minimalsoc_bus_errors <= (main_minimalsoc_bus_errors + 1'd1);
        end
    end
    if (main_minimalsoc_latch) begin
        main_minimalsoc_mbus_rdata1 <= main_minimalsoc_idbus_dat_r;
    end
    builder_femtorv_state <= builder_femtorv_next_state;
    if (main_minimalsoc_idbus_adr_next_value_ce0) begin
        main_minimalsoc_idbus_adr <= main_minimalsoc_idbus_adr_next_value0;
    end
    if (main_minimalsoc_idbus_dat_w_next_value_ce1) begin
        main_minimalsoc_idbus_dat_w <= main_minimalsoc_idbus_dat_w_next_value1;
    end
    if (main_minimalsoc_idbus_sel_next_value_ce2) begin
        main_minimalsoc_idbus_sel <= main_minimalsoc_idbus_sel_next_value2;
    end
    if (main_minimalsoc_idbus_we_next_value_ce3) begin
        main_minimalsoc_idbus_we <= main_minimalsoc_idbus_we_next_value3;
    end
    main_minimalsoc_minimalsoc_ram_bus_ack <= 1'd0;
    if (((main_minimalsoc_minimalsoc_ram_bus_cyc & main_minimalsoc_minimalsoc_ram_bus_stb) & ((~main_minimalsoc_minimalsoc_ram_bus_ack) | main_minimalsoc_minimalsoc_adr_burst))) begin
        main_minimalsoc_minimalsoc_ram_bus_ack <= 1'd1;
    end
    main_minimalsoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_minimalsoc_ram_bus_ram_bus_cyc & main_minimalsoc_ram_bus_ram_bus_stb) & ((~main_minimalsoc_ram_bus_ram_bus_ack) | main_minimalsoc_ram_adr_burst))) begin
        main_minimalsoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_minimalsoc_tx_tick, main_minimalsoc_tx_phase} <= 26'd41231686;
    if (main_minimalsoc_tx_enable) begin
        {main_minimalsoc_tx_tick, main_minimalsoc_tx_phase} <= (main_minimalsoc_tx_phase + 26'd41231686);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_minimalsoc_tx_count_rs232phytx_next_value_ce0) begin
        main_minimalsoc_tx_count <= main_minimalsoc_tx_count_rs232phytx_next_value0;
    end
    if (main_minimalsoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_minimalsoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_minimalsoc_tx_data_rs232phytx_next_value_ce2) begin
        main_minimalsoc_tx_data <= main_minimalsoc_tx_data_rs232phytx_next_value2;
    end
    main_minimalsoc_rx_rx_d <= main_minimalsoc_rx_rx;
    {main_minimalsoc_rx_tick, main_minimalsoc_rx_phase} <= 32'd2147483648;
    if (main_minimalsoc_rx_enable) begin
        {main_minimalsoc_rx_tick, main_minimalsoc_rx_phase} <= (main_minimalsoc_rx_phase + 26'd41231686);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_minimalsoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_minimalsoc_rx_count <= main_minimalsoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_minimalsoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_minimalsoc_rx_data <= main_minimalsoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_minimalsoc_tx_clear) begin
        main_minimalsoc_tx_pending <= 1'd0;
    end
    main_minimalsoc_tx_trigger_d <= main_minimalsoc_tx_trigger;
    if ((main_minimalsoc_tx_trigger & (~main_minimalsoc_tx_trigger_d))) begin
        main_minimalsoc_tx_pending <= 1'd1;
    end
    if (main_minimalsoc_rx_clear) begin
        main_minimalsoc_rx_pending <= 1'd0;
    end
    main_minimalsoc_rx_trigger_d <= main_minimalsoc_rx_trigger;
    if ((main_minimalsoc_rx_trigger & (~main_minimalsoc_rx_trigger_d))) begin
        main_minimalsoc_rx_pending <= 1'd1;
    end
    if (main_minimalsoc_tx_fifo_syncfifo_re) begin
        main_minimalsoc_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_minimalsoc_tx_fifo_re) begin
            main_minimalsoc_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_minimalsoc_tx_fifo_syncfifo_we & main_minimalsoc_tx_fifo_syncfifo_writable) & (~main_minimalsoc_tx_fifo_replace))) begin
        main_minimalsoc_tx_fifo_produce <= (main_minimalsoc_tx_fifo_produce + 1'd1);
    end
    if (main_minimalsoc_tx_fifo_do_read) begin
        main_minimalsoc_tx_fifo_consume <= (main_minimalsoc_tx_fifo_consume + 1'd1);
    end
    if (((main_minimalsoc_tx_fifo_syncfifo_we & main_minimalsoc_tx_fifo_syncfifo_writable) & (~main_minimalsoc_tx_fifo_replace))) begin
        if ((~main_minimalsoc_tx_fifo_do_read)) begin
            main_minimalsoc_tx_fifo_level0 <= (main_minimalsoc_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_minimalsoc_tx_fifo_do_read) begin
            main_minimalsoc_tx_fifo_level0 <= (main_minimalsoc_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_minimalsoc_rx_fifo_syncfifo_re) begin
        main_minimalsoc_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_minimalsoc_rx_fifo_re) begin
            main_minimalsoc_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_minimalsoc_rx_fifo_syncfifo_we & main_minimalsoc_rx_fifo_syncfifo_writable) & (~main_minimalsoc_rx_fifo_replace))) begin
        main_minimalsoc_rx_fifo_produce <= (main_minimalsoc_rx_fifo_produce + 1'd1);
    end
    if (main_minimalsoc_rx_fifo_do_read) begin
        main_minimalsoc_rx_fifo_consume <= (main_minimalsoc_rx_fifo_consume + 1'd1);
    end
    if (((main_minimalsoc_rx_fifo_syncfifo_we & main_minimalsoc_rx_fifo_syncfifo_writable) & (~main_minimalsoc_rx_fifo_replace))) begin
        if ((~main_minimalsoc_rx_fifo_do_read)) begin
            main_minimalsoc_rx_fifo_level0 <= (main_minimalsoc_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_minimalsoc_rx_fifo_do_read) begin
            main_minimalsoc_rx_fifo_level0 <= (main_minimalsoc_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_timer0_en_storage) begin
        if ((main_timer0_value == 1'd0)) begin
            main_timer0_value <= main_timer0_reload_storage;
        end else begin
            main_timer0_value <= (main_timer0_value - 1'd1);
        end
    end else begin
        main_timer0_value <= main_timer0_load_storage;
    end
    if (main_timer0_update_value_re) begin
        main_timer0_value_status <= main_timer0_value;
    end
    if (main_timer0_zero_clear) begin
        main_timer0_zero_pending <= 1'd0;
    end
    main_timer0_zero_trigger_d <= main_timer0_zero_trigger;
    if ((main_timer0_zero_trigger & (~main_timer0_zero_trigger_d))) begin
        main_timer0_zero_pending <= 1'd1;
    end
    builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
    builder_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank0_sel) begin
        case (builder_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csrbank0_reset0_re) begin
        main_minimalsoc_reset_storage <= builder_csrbank0_reset0_r;
    end
    main_minimalsoc_reset_re <= builder_csrbank0_reset0_re;
    if (builder_csrbank0_scratch0_re) begin
        main_minimalsoc_scratch_storage <= builder_csrbank0_scratch0_r;
    end
    main_minimalsoc_scratch_re <= builder_csrbank0_scratch0_re;
    main_minimalsoc_bus_errors_re <= builder_csrbank0_bus_errors_re;
    builder_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank1_sel) begin
        case (builder_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface1_bank_bus_dat_r <= builder_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csrbank1_out0_re) begin
        main_storage <= builder_csrbank1_out0_r;
    end
    main_re <= builder_csrbank1_out0_re;
    builder_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank2_sel) begin
        case (builder_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface2_bank_bus_dat_r <= main_minimalsoc_rxtx_w;
            end
            1'd1: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_txfull_w;
            end
            2'd2: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_rxempty_w;
            end
            2'd3: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_ev_status_w;
            end
            3'd4: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_ev_pending_w;
            end
            3'd5: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_ev_enable0_w;
            end
            3'd6: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_txempty_w;
            end
            3'd7: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_rxfull_w;
            end
        endcase
    end
    main_minimalsoc_txfull_re <= builder_csrbank2_txfull_re;
    main_minimalsoc_rxempty_re <= builder_csrbank2_rxempty_re;
    main_minimalsoc_status_re <= builder_csrbank2_ev_status_re;
    if (builder_csrbank2_ev_pending_re) begin
        main_minimalsoc_pending_r <= builder_csrbank2_ev_pending_r;
    end
    main_minimalsoc_pending_re <= builder_csrbank2_ev_pending_re;
    if (builder_csrbank2_ev_enable0_re) begin
        main_minimalsoc_enable_storage <= builder_csrbank2_ev_enable0_r;
    end
    main_minimalsoc_enable_re <= builder_csrbank2_ev_enable0_re;
    main_minimalsoc_txempty_re <= builder_csrbank2_txempty_re;
    main_minimalsoc_rxfull_re <= builder_csrbank2_rxfull_re;
    builder_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank3_sel) begin
        case (builder_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_load0_w;
            end
            1'd1: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_reload0_w;
            end
            2'd2: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_en0_w;
            end
            2'd3: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_update_value0_w;
            end
            3'd4: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_value_w;
            end
            3'd5: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_ev_status_w;
            end
            3'd6: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_ev_pending_w;
            end
            3'd7: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (builder_csrbank3_load0_re) begin
        main_timer0_load_storage <= builder_csrbank3_load0_r;
    end
    main_timer0_load_re <= builder_csrbank3_load0_re;
    if (builder_csrbank3_reload0_re) begin
        main_timer0_reload_storage <= builder_csrbank3_reload0_r;
    end
    main_timer0_reload_re <= builder_csrbank3_reload0_re;
    if (builder_csrbank3_en0_re) begin
        main_timer0_en_storage <= builder_csrbank3_en0_r;
    end
    main_timer0_en_re <= builder_csrbank3_en0_re;
    if (builder_csrbank3_update_value0_re) begin
        main_timer0_update_value_storage <= builder_csrbank3_update_value0_r;
    end
    main_timer0_update_value_re <= builder_csrbank3_update_value0_re;
    main_timer0_value_re <= builder_csrbank3_value_re;
    main_timer0_status_re <= builder_csrbank3_ev_status_re;
    if (builder_csrbank3_ev_pending_re) begin
        main_timer0_pending_r <= builder_csrbank3_ev_pending_r;
    end
    main_timer0_pending_re <= builder_csrbank3_ev_pending_re;
    if (builder_csrbank3_ev_enable0_re) begin
        main_timer0_enable_storage <= builder_csrbank3_ev_enable0_r;
    end
    main_timer0_enable_re <= builder_csrbank3_ev_enable0_re;
    if (sys_rst) begin
        main_minimalsoc_reset_storage <= 2'd0;
        main_minimalsoc_reset_re <= 1'd0;
        main_minimalsoc_scratch_storage <= 32'd305419896;
        main_minimalsoc_scratch_re <= 1'd0;
        main_minimalsoc_bus_errors_re <= 1'd0;
        main_minimalsoc_bus_errors <= 32'd0;
        main_minimalsoc_idbus_we <= 1'd0;
        main_minimalsoc_mbus_rdata1 <= 32'd0;
        main_minimalsoc_minimalsoc_ram_bus_ack <= 1'd0;
        main_minimalsoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        main_minimalsoc_tx_tick <= 1'd0;
        main_minimalsoc_rx_tick <= 1'd0;
        main_minimalsoc_rx_rx_d <= 1'd0;
        main_minimalsoc_txfull_re <= 1'd0;
        main_minimalsoc_rxempty_re <= 1'd0;
        main_minimalsoc_tx_pending <= 1'd0;
        main_minimalsoc_tx_trigger_d <= 1'd0;
        main_minimalsoc_rx_pending <= 1'd0;
        main_minimalsoc_rx_trigger_d <= 1'd0;
        main_minimalsoc_status_re <= 1'd0;
        main_minimalsoc_pending_re <= 1'd0;
        main_minimalsoc_pending_r <= 2'd0;
        main_minimalsoc_enable_storage <= 2'd0;
        main_minimalsoc_enable_re <= 1'd0;
        main_minimalsoc_txempty_re <= 1'd0;
        main_minimalsoc_rxfull_re <= 1'd0;
        main_minimalsoc_tx_fifo_readable <= 1'd0;
        main_minimalsoc_tx_fifo_level0 <= 5'd0;
        main_minimalsoc_tx_fifo_produce <= 4'd0;
        main_minimalsoc_tx_fifo_consume <= 4'd0;
        main_minimalsoc_rx_fifo_readable <= 1'd0;
        main_minimalsoc_rx_fifo_level0 <= 5'd0;
        main_minimalsoc_rx_fifo_produce <= 4'd0;
        main_minimalsoc_rx_fifo_consume <= 4'd0;
        main_storage <= 3'd0;
        main_re <= 1'd0;
        main_timer0_load_storage <= 32'd0;
        main_timer0_load_re <= 1'd0;
        main_timer0_reload_storage <= 32'd0;
        main_timer0_reload_re <= 1'd0;
        main_timer0_en_storage <= 1'd0;
        main_timer0_en_re <= 1'd0;
        main_timer0_update_value_storage <= 1'd0;
        main_timer0_update_value_re <= 1'd0;
        main_timer0_value_status <= 32'd0;
        main_timer0_value_re <= 1'd0;
        main_timer0_zero_pending <= 1'd0;
        main_timer0_zero_trigger_d <= 1'd0;
        main_timer0_status_re <= 1'd0;
        main_timer0_pending_re <= 1'd0;
        main_timer0_pending_r <= 1'd0;
        main_timer0_enable_storage <= 1'd0;
        main_timer0_enable_re <= 1'd0;
        main_timer0_value <= 32'd0;
        builder_slave_sel_r <= 3'd0;
        builder_count <= 20'd1000000;
        builder_femtorv_state <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_wishbone2csr_state <= 1'd0;
    end
    builder_regs0 <= serial_rx;
    builder_regs1 <= builder_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 71-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:70];
initial begin
	$readmemh("vsd_mini_fpga_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_minimalsoc_minimalsoc_adr];
end
assign main_minimalsoc_minimalsoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory main_ram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:2047];
initial begin
	$readmemh("vsd_mini_fpga_main_ram.init", main_ram);
end
reg [10:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (main_minimalsoc_ram_we[0])
		main_ram[main_minimalsoc_ram_adr][7:0] <= main_minimalsoc_ram_dat_w[7:0];
	if (main_minimalsoc_ram_we[1])
		main_ram[main_minimalsoc_ram_adr][15:8] <= main_minimalsoc_ram_dat_w[15:8];
	if (main_minimalsoc_ram_we[2])
		main_ram[main_minimalsoc_ram_adr][23:16] <= main_minimalsoc_ram_dat_w[23:16];
	if (main_minimalsoc_ram_we[3])
		main_ram[main_minimalsoc_ram_adr][31:24] <= main_minimalsoc_ram_dat_w[31:24];
	main_ram_adr0 <= main_minimalsoc_ram_adr;
end
assign main_minimalsoc_ram_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_minimalsoc_tx_fifo_wrport_we)
		storage[main_minimalsoc_tx_fifo_wrport_adr] <= main_minimalsoc_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_minimalsoc_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_minimalsoc_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_minimalsoc_tx_fifo_rdport_adr];
end
assign main_minimalsoc_tx_fifo_wrport_dat_r = storage_dat0;
assign main_minimalsoc_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_minimalsoc_rx_fifo_wrport_we)
		storage_1[main_minimalsoc_rx_fifo_wrport_adr] <= main_minimalsoc_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_minimalsoc_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_minimalsoc_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_minimalsoc_rx_fifo_rdport_adr];
end
assign main_minimalsoc_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_minimalsoc_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance FemtoRV32 of FemtoRV32 Module.
//------------------------------------------------------------------------------
FemtoRV32 #(
	// Parameters.
	.ADDR_WIDTH (6'd32),
	.RESET_ADDR (32'd0)
) FemtoRV32 (
	// Inputs.
	.clk       (sys_clk),
	.mem_rbusy (main_minimalsoc_mbus_rbusy),
	.mem_rdata (main_minimalsoc_mbus_rdata0),
	.mem_wbusy (main_minimalsoc_mbus_wbusy),
	.reset     ((~(sys_rst | main_minimalsoc_reset))),

	// Outputs.
	.mem_addr  (main_minimalsoc_mbus_addr),
	.mem_rstrb (main_minimalsoc_mbus_rstrb),
	.mem_wdata (main_minimalsoc_mbus_wdata),
	.mem_wmask (main_minimalsoc_mbus_wmask)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-07-16 14:23:44.
//------------------------------------------------------------------------------
