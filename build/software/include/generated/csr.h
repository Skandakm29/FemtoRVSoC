//--------------------------------------------------------------------------------
// Auto-generated by LiteX (bc25ed7fd) on 2025-07-16 14:23:44
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>

#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0x82000000L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* LEDS Registers */
#define CSR_LEDS_BASE (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x0L)
#define CSR_LEDS_OUT_SIZE 1

/* LEDS Fields */

/* TIMER0 Registers */
#define CSR_TIMER0_BASE (CSR_BASE + 0x800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x800L)
#define CSR_TIMER0_LOAD_SIZE 1
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x804L)
#define CSR_TIMER0_RELOAD_SIZE 1
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x808L)
#define CSR_TIMER0_EN_SIZE 1
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x80cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x810L)
#define CSR_TIMER0_VALUE_SIZE 1
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x81cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1

/* TIMER0 Fields */
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x1000L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x1000L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x1004L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x1008L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* SERIAL Registers */
#define CSR_SERIAL_BASE (CSR_BASE + 0x1800L)
#define CSR_SERIAL_RXTX_ADDR (CSR_BASE + 0x1800L)
#define CSR_SERIAL_RXTX_SIZE 1
#define CSR_SERIAL_TXFULL_ADDR (CSR_BASE + 0x1804L)
#define CSR_SERIAL_TXFULL_SIZE 1
#define CSR_SERIAL_RXEMPTY_ADDR (CSR_BASE + 0x1808L)
#define CSR_SERIAL_RXEMPTY_SIZE 1
#define CSR_SERIAL_EV_STATUS_ADDR (CSR_BASE + 0x180cL)
#define CSR_SERIAL_EV_STATUS_SIZE 1
#define CSR_SERIAL_EV_PENDING_ADDR (CSR_BASE + 0x1810L)
#define CSR_SERIAL_EV_PENDING_SIZE 1
#define CSR_SERIAL_EV_ENABLE_ADDR (CSR_BASE + 0x1814L)
#define CSR_SERIAL_EV_ENABLE_SIZE 1
#define CSR_SERIAL_TXEMPTY_ADDR (CSR_BASE + 0x1818L)
#define CSR_SERIAL_TXEMPTY_SIZE 1
#define CSR_SERIAL_RXFULL_ADDR (CSR_BASE + 0x181cL)
#define CSR_SERIAL_RXFULL_SIZE 1

/* SERIAL Fields */
#define CSR_SERIAL_EV_STATUS_TX_OFFSET 0
#define CSR_SERIAL_EV_STATUS_TX_SIZE 1
#define CSR_SERIAL_EV_STATUS_RX_OFFSET 1
#define CSR_SERIAL_EV_STATUS_RX_SIZE 1
#define CSR_SERIAL_EV_PENDING_TX_OFFSET 0
#define CSR_SERIAL_EV_PENDING_TX_SIZE 1
#define CSR_SERIAL_EV_PENDING_RX_OFFSET 1
#define CSR_SERIAL_EV_PENDING_RX_SIZE 1
#define CSR_SERIAL_EV_ENABLE_TX_OFFSET 0
#define CSR_SERIAL_EV_ENABLE_TX_SIZE 1
#define CSR_SERIAL_EV_ENABLE_RX_OFFSET 1
#define CSR_SERIAL_EV_ENABLE_RX_SIZE 1

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* LEDS Access Functions */
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}

/* TIMER0 Access Functions */
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x808L));
}
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x80cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x80cL));
}
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x810L));
}
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x814L));
}
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x818L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x818L));
}
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x81cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x81cL));
}

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1004L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}

/* SERIAL Access Functions */
static inline uint32_t serial_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void serial_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}
static inline uint32_t serial_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x1804L));
}
static inline uint32_t serial_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x1808L));
}
static inline uint32_t serial_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x180cL));
}
static inline uint32_t serial_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x1810L));
}
static inline void serial_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1810L));
}
static inline uint32_t serial_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1814L));
}
static inline void serial_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1814L));
}
static inline uint32_t serial_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x1818L));
}
static inline uint32_t serial_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x181cL));
}
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
